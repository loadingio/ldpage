// Generated by LiveScript 1.6.0
(function(){
  var paginate;
  paginate = function(opt){
    var ref$;
    opt == null && (opt = {});
    if (opt.fetch) {
      this._user_fetch = opt.fetch;
      delete opt.fetch;
    }
    this._evthdr = {};
    this._hdl = {};
    this.data = {};
    this.offset = 0;
    this.running = false;
    this.end = false;
    this.disabled = opt.enabled != null ? !opt.enabled : false;
    this._o = import$({
      boundary: 5,
      limit: 20,
      offset: 0,
      scrollDelay: 100,
      fetchDelay: 200,
      fetchOnScroll: false
    }, opt);
    this.limit = (ref$ = this._o).limit;
    this.offset = ref$.offset;
    if (this._o.host) {
      this.setHost(this._o.host);
    }
    this.fetch = debounce(this._o.fetchDelay, this._fetch);
    return this;
  };
  paginate.prototype = import$(Object.create(Object.prototype), {
    _user_fetch: function(){
      return new Promise(function(res, rej){
        return res([]);
      });
    },
    toggle: function(v){
      return this.disabled = v != null
        ? !v
        : !this.disabled;
    },
    on: function(n, cb){
      var this$ = this;
      return (Array.isArray(n)
        ? n
        : [n]).map(function(n){
        var ref$;
        return ((ref$ = this$._evthdr)[n] || (ref$[n] = [])).push(cb);
      });
    },
    fire: function(n){
      var v, res$, i$, to$, ref$, len$, cb, results$ = [];
      res$ = [];
      for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      v = res$;
      for (i$ = 0, len$ = (ref$ = this._evthdr[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    reset: function(opt){
      var k, ref$, v;
      opt == null && (opt = {});
      for (k in ref$ = this._hdl) {
        v = ref$[k];
        clearTimeout(v);
      }
      this.offset = 0;
      this.end = false;
      if (opt.data) {
        return this.data = opt.data;
      }
    },
    init: function(opt){
      return this.reset(opt);
    },
    fetchable: function(){
      return !(this.disabled || this.end || this.running);
    },
    isEnd: function(){
      return this.end;
    },
    setHost: function(host){
      var update, this$ = this;
      if (!host) {
        host = document.scrollingElement;
      }
      if (this.host && this._scrollFunc) {
        this.host.removeEventListener('scroll', this._scrollFunc);
      }
      this._scrollFunc = function(e){
        return this$.onScroll(e);
      };
      this.host = typeof host === 'string' ? document.querySelector(host) : host;
      if (!this.host) {
        this.host = null;
        return;
      }
      if (this._o.fetchOnScroll && !this._o.pivot) {
        this.host.addEventListener('scroll', this._scrollFunc);
      }
      update = function(ns){
        if (!(ns.map(function(it){
          return it.isIntersecting;
        }).filter(function(it){
          return it;
        }).length && this$.fetchable())) {
          return;
        }
        return this$.fetch().then(function(it){
          return this$.fire('scroll.fetch', it);
        });
      };
      if (this.obs && this._o.pivot) {
        this.obs.unobserve(this._o.pivot);
      }
      if (this._o.pivot) {
        this.obs = new IntersectionObserver(update, {});
        return this.obs.observe(this._o.pivot);
      }
    },
    onScroll: function(){
      var h, this$ = this;
      if (!this.fetchable()) {
        return;
      }
      clearTimeout(this._hdl.scroll);
      h = this.host === window
        ? document.scrollingElement
        : this.host;
      return this._hdl.scroll = setTimeout(function(){
        if (h.scrollHeight - h.scrollTop - h.clientHeight > this$._o.boundary) {
          return;
        }
        if (this$.fetchable()) {
          return this$.fetch().then(function(it){
            return this$.fire('scroll.fetch', it);
          });
        }
      }, this._o.scrollDelay);
    },
    _fetch: function(opt){
      var this$ = this;
      opt == null && (opt = {});
      if (!this.fetchable()) {
        return res([]);
      }
      this.fire('fetching');
      this.running = true;
      return this._user_fetch().then(function(r){
        r == null && (r = []);
        this$.running = false;
        this$.offset += r.length || 0;
        this$.fire('fetch', r);
        if (r.length < this$.limit) {
          this$.end = true;
          this$.fire(!this$.offset ? 'empty' : 'finish');
        }
        return r;
      });
    },
    _fetchx: function(opt){
      var this$ = this;
      opt == null && (opt = {});
      return new Promise(function(res, rej){
        if (!this$.fetchable()) {
          return res([]);
        }
        if (this$._hdl.fetch) {
          clearTimeout(this$._hdl.fetch);
        }
        this$.fire('fetching');
        return this$._hdl.fetch = setTimeout(function(){
          this$.running = true;
          return this$._user_fetch().then(function(ret){
            ret == null && (ret = []);
            this$.running = false;
            this$.offset += ret.length || 0;
            this$.fire('fetch', ret);
            if (ret.length < this$.limit) {
              this$.end = true;
              this$.fire(!this$.offset ? 'empty' : 'finish');
            }
            return res(ret);
          });
        }, opt.delay || this$._o.fetchDelay || 200);
      });
    }
  });
  if (typeof module != 'undefined' && module !== null) {
    module.exports = paginate;
  } else if (typeof window != 'undefined' && window !== null) {
    window.paginate = paginate;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
